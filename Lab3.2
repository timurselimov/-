# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rhB0M--eQezGjkkjQipj8hQXtT9VH_t_
"""

import numpy as np
import os
import cv2
import matplotlib.pyplot as plt
from google.colab import drive

# Монтируем Google Drive (без повторного монтирования)
try:
    drive.mount('/content/drive')
except:
    pass

class ART1:
    def __init__(self, input_size, vigilance=0.6, learning_rate=1.0):
        self.input_size = input_size
        self.vigilance = vigilance
        self.learning_rate = learning_rate
        self.B = []
        self.T = []
        self.categories = []

    def add_category(self, input_pattern):
        new_B = np.ones(self.input_size) / (1 + self.input_size)
        new_T = input_pattern.copy()
        self.B.append(new_B)
        self.T.append(new_T)
        self.categories.append(input_pattern.copy())
        return len(self.B) - 1

    def train(self, input_pattern):
        input_pattern = np.array(input_pattern, dtype=float)
        input_norm = input_pattern.sum()

        if input_norm == 0:
            return -1, 0.0

        if len(self.B) == 0:
            return self.add_category(input_pattern), 1.0

        S = np.array([np.dot(b, input_pattern) for b in self.B])

        for winner in np.argsort(S)[::-1]:
            if S[winner] < 0:
                continue

            match = np.minimum(self.T[winner], input_pattern)
            match_norm = match.sum()
            resonance = match_norm / input_norm

            if resonance >= self.vigilance:
                self.B[winner] = (self.learning_rate * match) / (0.5 + self.learning_rate * match_norm)
                self.T[winner] = match
                self.categories[winner] = match
                return winner, resonance

        new_neuron = self.add_category(input_pattern)
        return new_neuron, 1.0

def load_images_from_folder(folder, threshold=128, size=(16,16)):
    images = []
    filenames = []
    for filename in sorted(os.listdir(folder)):
        if filename.endswith(('.png', '.bmp', '.jpg')):
            img_path = os.path.join(folder, filename)
            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
            img = cv2.resize(img, size)
            _, binary = cv2.threshold(img, threshold, 1, cv2.THRESH_BINARY)
            images.append(binary.flatten())
            filenames.append(filename)
    return np.array(images), filenames

def plot_final_neurons(art):
    num_neurons = len(art.B)
    if num_neurons == 0:
        print("Нет обученных нейронов для отображения")
        return

    cols = min(5, num_neurons)
    rows = (num_neurons + cols - 1) // cols

    plt.figure(figsize=(cols*3, rows*3))

    for j in range(num_neurons):
        plt.subplot(rows, cols, j+1)
        plt.imshow(art.categories[j].reshape(16,16), cmap='gray', vmin=0, vmax=1)
        plt.title(f'Нейрон {j}', fontsize=12)
        plt.axis('off')

    plt.tight_layout()
    plt.show()  # Явный вызов show()

def train_and_visualize():
    images_folder = "/content/drive/MyDrive/ColabFiles/ARTicon16"
    train_data, filenames = load_images_from_folder(images_folder)

    print("Начало обучения (vigilance=0.6)")
    print(f"Всего образцов: {len(train_data)}")

    art = ART1(input_size=train_data.shape[1])

    for i, (sample, filename) in enumerate(zip(train_data, filenames)):
        winner, match = art.train(sample)
        print(f"Образец {i+1}: нейрон-{winner}, сходство={match:.2f}")

    print("\nОбучение завершено! Результаты:")
    print(f"Всего создано нейронов: {len(art.B)}")

    # Гарантированное отображение результатов
    plot_final_neurons(art)

    # Дополнительно сохраняем изображение на диск
    plt.savefig('/content/art1_results.png')
    print("\nРезультаты сохранены в файл: art1_results.png")

# Запускаем обучение и визуализацию
train_and_visualize()
